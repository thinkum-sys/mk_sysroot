#!/usr/bin/env bash

## pkg_lint_versions - Operate on the pkg_info(1) database and PKGSRCDIR
## to determine which installed packages do not match the version
## available under PKGSRCDIR. Print a minimally verbose message onto
## STDERR and the installed package <x>-<version> pair onto STDOUT, for
## each such "Non-Matching" package/port pair.
##
## Version: 0.2
##
## Usage, filtering other output for local "Mismatch" messages
##
##  pkg_lint_versions 2>&1 | grep '^#-- Mismatch'
##
## Usage, with a pksgsrc system under ${HOME}
##
##  env PKGSRCDIR=~/pkgsrc LOCALBASE=~/pkg pkg_lint_versions.sh ...
##
## Known Issues
##
## - Calls bmake "Newly" for every single installed pkg. In effect, it
##   is a "Slow Script," even for a moderately small local pkgsrc
##   installation
##
## - Does not allow the caller to specify LOCALBASE directly - this may
##   be set indirectly via PKG_INFO, for the duration of this shell script
##
## - Does not fail gracefully if an installed pkg is not available under
##   PKGSRCDIR
##
## - Like other sh_pkg shell scripts in this repository, uses a
##   hard-coded path to pkg_shell.sh
##
## - FIXME: Needs a portable install script
##
## Additional Remarks
##
## - Not to be confused with pkglint
##
## - TBD/QA about the following output, singularly in a pkgsrc build on
##   Linux/glibc:
##   /usr/pkg/sbin/pkg_info: /usr/pkg/lib/libssl.so.1.0.0: no version information available (required by /usr/pkg/sbin/pkg_info)
##   ... and whether or not this may indicate anything with regards to
##   system overhed, in this process.
##
## - This simple shell script does not provide any facilities for
##   pkg configuration management, pkg dependency graphing, or pkg
##   build+reinstall scripting
##
##   - TBD exec under Linux taskset(1) or similar in BSD
##     - TBD Linux taskset(1) and I/O scheduling; Similar in BSD
##     - NB Linux cpufreq-info(1), cpufreq-set(1); TBD @ BSD
##
##   - TBD alleviating the exec() overhead, using UNIX fork and bmake as
##     a dso, linked pre-fork (??) (NB: Would not, in itself, serve to
##     alleviate the i/o overhead entailed in re-parsing the entire
##     mk-files system for each installed port, plus anything being
##     accessed by pkg_info during this processs)
##
##   - TBD multithreading in guile
##     ref https://www.gnu.org/software/guile/manual/html_node/Scheduling.html
##     ref for C-like programs https://www.gnu.org/software/guile/manual/html_node/Multi_002dThreading.html
##
##   - TBD pkg_mklib for guile (mklib extensions as a utility for pkgsrc)
##
##   - TBD mklib for guile (guile integration for bmake, under arbitrary
##     mk-files systems)
##
##   - TBD shexeclib for guile (environment; I/O descriptors; stream parsing)
##
##   - TBD shparselib for guile (vis a vis the original awk; integration
##     with shexeclib)
##
##   - TBD ptylib for guile (vis a vis pretty-printing in interactive
##     logging messages)
##
##   - NB: For packages named such as py27-setuptools-<VERSION>
##     a notion of "Package variant" may be introduced. This would at
##     least be a concern for Python packages, and may be concern for
##     other packages built under variant configuration. Of course, some
##     builds may require a specific version other than what would be
##     preferred in the local pkgsrc installation, under any single
##     configuration. This concept corresponds to the usage of MULTI
##     variables, in pkgsrc.
##
##   - TBD: Concerning PKG_SUPPORTED_OPTIONS for each built port,
##     add the value to BUILD_DEFS and/or store locally for each built pkg;
##     Notify systems manager on event of change in the list of
##     PKG_SUPPORTED_OPTIONS, for each installed pkg under a given
##     LOCALBASE (Binding Context: Port/Pkg, indep. of build-system
##     schema or installation-system schema)
##
##   - TBD: Provide an option -- for a duration of "Build time" -- to
##     update build depends/tool depends and optionally, test depends,
##     for each "Mismatch" to the available pkgsrc version
##
##   - TBD: Provide options for filtering on pkgname and/or pkgpath such
##     as to prevent the upgrade of an installed pkg
##
##   - NB: The dependency graph, in effect, begins at the set of known,
##     manually installed packages -- subsequently, to the set of known
##     runtime dependencies of those.
##
##   - TBD: Linting for REQUIRES paths in pkgdb +BUILD_INFO absent of
##     a pkg depdendency denoted in the port mk-file - would require a
##     separate graph of all files provided by each pkg. TBD: Additional
##     linting for host package/pkgsrc alternatives.
##
##   - TBD: Notification for each pkg providing a REQUIRES
##     specification in pkgdb +BUILD_INFO, such that A) The REQUIRES
##     specification denotes a pathname outside of the configured
##     LOCALBASE and B) The REQUIRES specification denotes a pathname
##     that no longer identifies an existing file
##
##   - TBD - Alternate scripting langauges (??)
##
##     - 'Struct' types and sh i/o in GNU guile (??)
##

_THIS_P=$(readlink -f "$0")
_HERE=$(dirname "${_THIS_P}")
_THIS=$(basename "${_THIS_P}")

_MISMATCH="0"

_PMISMATCH=""

# NB: AWK, PKG_INFO - set via pkg_shell.sh

. "${_HERE}/pkg_shell.sh"

${PKG_INFO} -a | ${AWK} '{print $1}' | {

while read PKGNAME; do
  V_INSTALLED=$(_pkg_pkgver_i ${PKGNAME})
  V_PKGSRC=$(_pkg_pkgver_p ${PKGNAME})
  if [ "${V_INSTALLED}" !=  "${V_PKGSRC}" ]; then

    ## TBD: Use getopt & make this mismatch message (stderr) optional
    echo "#-- Mismatch $((_MISMATCH++)) \
@ $(_pkg_path_p ${PKGNAME}):$(_pkg_name_nover_p ${PKGNAME}) \
- installed: ${V_INSTALLED} / pkgsrc: ${V_PKGSRC}" 1>&2

    echo ${PKGNAME} # ${V_INSTALLED}
  fi
done

}

if [ "${_MISMATCH}" -gt "0" ]; then
  echo "#-- ${_MISMATCH} total non-matching"
  exit 1
fi
